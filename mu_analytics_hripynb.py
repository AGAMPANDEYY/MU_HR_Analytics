# -*- coding: utf-8 -*-
"""MU_Analytics_HRipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jCJ6tRT-nSVY0S-beYmg1iCAMnYHS0sC
"""

import numpy as np
import seaborn as sns
import matplotlib as plt
import pandas as pd

import gdown

!gdown https://drive.google.com/uc?id=drive/folders/153Kf-gTC4BKveS1Va-bVzvQpSNeZvGjK

#from google.colab import drive
#drive.mount('/content/drive')

df1=pd.read_excel("/content/drive/MyDrive/MU Dataset/9-Box Scores.xlsx")
df2=pd.read_excel("/content/drive/MyDrive/MU Dataset/Attrition_Reason.xlsx")
df3=pd.read_excel("/content/drive/MyDrive/MU Dataset/Emp_Database.xlsx")
df4=pd.read_excel("/content/drive/MyDrive/MU Dataset/Management Meet Responses.xlsx")
df5=pd.read_excel("/content/drive/MyDrive/MU Dataset/Meet Category.xlsx")
df_hr=pd.read_excel("/content/drive/MyDrive/MU Dataset/HR MIS/HR Department.xlsx")
df_sales=pd.read_excel("/content/drive/MyDrive/MU Dataset/HR MIS/Sales Department.xlsx")
df_rd=pd.read_excel("/content/drive/MyDrive/MU Dataset/HR MIS/RandD Department.xlsx")

df1.to_csv()
df2.to_csv()
df3.to_csv()
df4.to_csv()
df5.to_csv()
df_hr.to_csv()
df_sales.to_csv()
df_rd.to_csv()

"""# **Data Pre-Processing**"""

df2=df2.drop('Attrition',axis=1)

"""Merging all department into one dataframe"""

df_dept=pd.concat([df_hr,df_sales,df_rd])

df_dept=df_dept.drop('EmployeeCount',axis=1)

df_dept=df_dept.merge(df3,on="Emp Code",how='left')

df_dept=df_dept.merge(df1,on="Emp Code",how='left')

df_dept=df_dept.merge(df2,on="Emp Code",how='left')

df_dept.info()

df_dept

df_dept.isnull().sum()

"""# **Gneral Info about Employees** (EDA)"""

import seaborn as sns

ax=sns.countplot(x="Department",y=None,data=df_dept,color="lightblue")
sns.set(rc={'figure.figsize':(6,5)})
ax.set(ylabel="No of Employees")
sns.set_style('white')
sns.despine(bottom=True,left=True)
for labels in ax.containers:
  ax.bar_label(labels)

df_dept['Department'].value_counts().plot(kind="pie",colors=["lightblue","grey","lightgreen"],figsize=(5,6),ylabel="",autopct='%1.1f%%',title="Workforce Composition by departments")

df0=pd.DataFrame()
df0['DistanceCat']=pd.cut(df_dept['DistanceFromHome'],bins=[0,5,10,15,30],labels=['Near (0-5)','Mid-Distance(5-10)','Far(10-15)','Very Far(15-30)']).value_counts()

#sns.barplot(df0,x=df0.index,y=df0.values)

df_dept['Gender'].value_counts().plot(kind="pie",figsize=(5,6),title="Workforce Gender composition",colors=['lightblue','lightgreen'],autopct='%1.1f%%',ylabel="")

df_dept['PercentSalaryHike'].describe()

"""**Department-wise Attrition of employees in %age**"""

df_att=df_dept.loc[(df_dept['Attrition']=='Yes','Department')].value_counts()

df_att

df_att.values[0]

df_dept.loc[(df_att.index[0]==df_dept['Department']),'Department'].value_counts()

pct=[]
for i in range(0,3):
  pct.append(df_att.values[i]/(df_dept.loc[(df_att.index[i]==df_dept['Department']),'Department'].value_counts())*100)

pc=[]
for i in range(len(pct)):
  pc.append(pct[i][0])

sns.set(rc={'figure.figsize':(7,5)})
sns.set_style("white")
ax=sns.barplot(x=df_att.index,y=pc,color="lightblue")
for labels in ax.containers:
  ax.bar_label(labels)
sns.despine(bottom=True,left=True)
ax.set(title="Department-wise % Attrition")

"""


---


---


**Sales Department has most of the employees wanting to Leave the company 20.6% followed by HR 19% and R&d with 13.8%**

---



---

"""

ax=sns.barplot(df_dept,x="PerformanceRating",y="JobSatisfaction",hue="Department",color="blue",ci=None)
sns.despine(bottom=True,left=True)
for label in ax.containers:
  ax.bar_label(label)

df=df_dept.loc[(df_dept['PerformanceRating']==4)& (df_dept['JobSatisfaction']<=2)&(df_dept['Attrition']=='Yes'),:]

#sns.rc=
sns.lineplot(df,x="YearsSinceLastPromotion",y="PercentSalaryHike",color="lightblue",ci=None)

df1=df.groupby('YearsInCurrentRole')

#sns.barplot(df,x=[min(df['YearsSinceLastPromotion']):max(df['YearsSinceLastPromotion'])],y=df['YearsSinceLastPromotion']==x)

"""Why Sales department has most Attrition is it Compa Ratio less?"""

df1=df_dept.loc[df_dept['COMPA RATIO']!='NaN',['COMPA RATIO','Emp Code','Department','Attrition']]
sns.set_style("white")
palette=['lightblue','lightgreen']
sns.barplot(df1,x='Department',y='COMPA RATIO',hue='Attrition',ci=None,palette=palette)
sns.despine(bottom=True,left=True)

"""

---



---


The above plot shows that Sales deparment and HR employees are paid less than their peers in the market,while R&D employees are paid competitive salary.


---



---

"""

df_att_gender=df_dept.loc[(df_dept['Attrition']=='Yes',['Department','Gender'])].value_counts()

df_att_gender

pctmale=[67.6,58.6,50.0]
pctfemale=[32.4,41.4,50.0]
sns.set(rc={'figure.figsize':(7,4)})
ax=sns.barplot(x=df_att.index,y=pctmale,color="lightblue")
bx=sns.barplot(x=df_att.index,y=pctfemale,color="lightgreen")
for labels in ax.containers:
  ax.bar_label(labels)
sns.despine(bottom=True,left=True)
#plt.legend(bbox_to_anchor=(1.05,1),loc='upper left',labels=['Male'])
ax.set(title="Gender Wise % Attrition in each Department")

"""---



---
Among all the leaving employees :


*   HR department has 50% each of male and female employees
*   Sales has 41.4% female and 58.6% male
*   R&D has 32.4% female and 67.6% male



---



---

What could be the Attrition Reason?
"""

sns.set(rc={'figure.figsize':(14,5)})
sns.set_style("white")
import matplotlib.pyplot as plt
ax=sns.countplot(x="Attrition Reason",hue="Regrettable",data=df2,palette="blend:lightgreen,lightblue")
plt.legend(bbox_to_anchor=(1,1),loc='upper left',borderaxespad=0)
sns.despine(bottom=True,left=True)
ax.set(ylabel="No. of employees")
for label in ax.containers:
  ax.bar_label(label)

"""

---



---

Employees with Direct Reporting Change, Absconding and Internal Job Posting don't have regrets of leaving the company
while
Employees leaving company due to
"""

!pip install plotly

import plotly.express as px

"""Impact of Attrition on Distance From Home"""

df_dept2=df_dept.groupby(['DistanceFromHome','Attrition']).apply(lambda x:x['Emp Code'].count()).reset_index(name="No of Employees")
dist_att=df_dept2.loc[df_dept2['Attrition']=='Yes',['No of Employees','DistanceFromHome','Attrition']]
ax=px.line(dist_att,x="DistanceFromHome",y="No of Employees",title="Distance of Office impact on Attrition")
ax.update_yaxes(showgrid=False)
ax.update_xaxes(showgrid=False)

df_dept2=df_dept.groupby(['DistanceFromHome','Attrition']).apply(lambda x:x['Emp Code'].count()).reset_index(name="No of Employees")
ax=px.line(df_dept2,x="DistanceFromHome",y="No of Employees",title="Distance of Office impact on Attrition",color="Attrition")
ax.update_yaxes(showgrid=False)
ax.update_xaxes(showgrid=False)

"""---



---
As distance of home from office increases, the percent of employees wanting to leave the company increases, both lineplot coming closer indicates the distance from home causes employees to consider attrition (employee/employer initiatied)


---



---

How does distance from home impact the Performace,Job Satisfaction of employees?
"""

sns.lineplot(df_dept,x='DistanceFromHome',y='PerformanceRating',hue='Attrition',ci=None)
sns.despine(bottom=True,left=True)

df_dept['DistanceFromHome'].describe()

df_dept['PerformanceRating']

"""# **REVIEW**"""

#ax=sns.barplot(df0,x=df0.index,y=df0['DistanceCat'],color="lightblue",hue=df0["Performance"])
#sns.set_style("white")
#sns.despine(bottom=True,left=True)
#ax.set(ylabel="No of Employees")
#for label in ax.containers:
 # ax.bar_label(label)

sns.lineplot(df_dept,x='DistanceFromHome',y='JobSatisfaction',hue='Attrition',ci=None)
sns.despine(bottom=True,left=True)

sns.lineplot(df_dept,x='DistanceFromHome',y='JobSatisfaction',ci=None)
sns.despine(bottom=True,left=True)

"""---



---

The above plots show that employees with greater distance from home have lesser job ssatisfaction and performance rating, such employees attrition can be predicted

---



---

Impact of Age on Attrition of employee?
"""

#age_att=df_dept.groupby(['Age','Attrition']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
#ax=px.line(age_att,x='Age',y='No of Employees',color='Attrition',title='Impact of Age of employee on Attrition',height=00,width=1000)
#ax.update_xaxes(showgrid=False)
#ax.update_yaxes(showgrid=False)

"""**Impact of Age on attrition**"""

ax=px.histogram(df_dept,x='Age',color='Attrition')
ax.update_layout(yaxis_title='No of Employees')

df_dept1=df_dept.groupby(['Age','Attrition']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
age_att=df_dept1.loc[df_dept1['Attrition']=='Yes',['Age','No of Employees','Attrition']]
ax=px.line(age_att,x='Age',y='No of Employees')
ax.update_xaxes(showgrid=False)
ax.update_yaxes(showgrid=False)

"""---



---

Employees of Age group 28-33 are more prone to Attrition (Yes)


---



---

Age and Years in current role relation
"""

sns.lineplot(df_dept,x="Age",y="YearsInCurrentRole",hue="Attrition",color="blue",ci=None)

"""

---



---


This shows that employees between 28-33yrs that are more prone to leave the company only have worked for 2-3 yrs in the company

Strategies to increases retention during these years such as keeping the manager same over years


---



---

"""

palette=['lightblue','lightgreen']
df_dept['AgeCat']=pd.cut(df_dept['Age'],bins=[0,5,10,15,30])
sns.barplot(df_dept,x="AgeCat",y="YearsSinceLastPromotion",hue="Attrition",ci=None,palette=palette)
sns.despine(bottom=True,left=True)

"""

---



---
Newer employees need faster promotions to keep them satisfied to work, 28-33 age group has avg 1-2 years since their last promotion, so proxy promotion to give them sense of achievment might be able to increase the retention at this fragile employee age group


---



---

"""

df_dept['TotalWorkingYears'].describe()

"""Impact of Income on Attrition of employees"""

df3=df_dept.groupby(['CTC','Attrition','PerformanceRating','TotalWorkingYears']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
inc_att=df3.loc[(df3['Attrition']=='Yes') & (df3['TotalWorkingYears']>5) &(df3['PerformanceRating']==4),['CTC','No of Employees','Attrition','PerformanceRating']]
ax=px.histogram(inc_att,x='CTC',y='No of Employees',title='Impact of Salary of employee on Attrition',color='PerformanceRating',height=500,width=1000)
ax.update_xaxes(showgrid=False)
ax.update_yaxes(showgrid=False)
ax.update_layout(bargap=0.3)
ax.update_layout(yaxis_title="No of Employees")

df3=df_dept.groupby(['CTC','Attrition','PerformanceRating','TotalWorkingYears']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
inc_att=df3.loc[ (df3['TotalWorkingYears']>5) &(df3['PerformanceRating']==4),['CTC','No of Employees','Attrition','PerformanceRating']]
ax=px.histogram(inc_att,x='CTC',y='No of Employees',title='Impact of Salary of employee on Attrition',color='PerformanceRating',height=500,width=1000)
ax.update_xaxes(showgrid=False)
ax.update_yaxes(showgrid=False)
ax.update_layout(bargap=0.3)
ax.update_layout(yaxis_title="No of Employees")

df3=df_dept.groupby(['CTC','Attrition','PerformanceRating','TotalWorkingYears','JobSatisfaction']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
inc_att=df3.loc[ (df3['TotalWorkingYears']>5) &(df3['PerformanceRating']==4) &(df3['JobSatisfaction']<=2),['CTC','No of Employees','Attrition','PerformanceRating']]
ax=px.histogram(inc_att,x='CTC',y='No of Employees',title='Impact of Salary of employee on Attrition',color='PerformanceRating',height=500,width=1000)
ax.update_xaxes(showgrid=False)
ax.update_yaxes(showgrid=False)
ax.update_layout(bargap=0.3)
ax.update_layout(yaxis_title="No of Employees")

df_dept['PercentSalaryHike'].describe()

df3=df_dept.groupby(['CTC','Attrition','PerformanceRating','TotalWorkingYears','JobSatisfaction','PercentSalaryHike']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
inc_att=df3.loc[ (df3['TotalWorkingYears']>5) &(df3['PerformanceRating']==4) &(df3['JobSatisfaction']<=2)&(df3['Attrition']=='Yes'),['CTC','No of Employees','Attrition','PerformanceRating','PercentSalaryHike']]
ax=px.histogram(inc_att,x='CTC',y='No of Employees',title='Impact of Salary of employee on Attrition',color='PercentSalaryHike',height=500,width=1000)
ax.update_xaxes(showgrid=False)
ax.update_yaxes(showgrid=False)
ax.update_layout(bargap=0.3)
ax.update_layout(yaxis_title="No of Employees")

ax.show()

"""---



---
Inference: Employees with lower CTC salary of range 50k to 100k are most likely to leave the company


---




---

Impact of working under the same manager on tendancy to leave the company
"""

df3=df_dept.loc[df_dept['Attrition']=='Yes',['YearsWithCurrManager']]
ax=px.histogram(df3,x='YearsWithCurrManager')
ax.update_layout(bargap=0.3)
ax.update_layout(yaxis_title="No of Employees")
ax.show()

"""


---


---
Employees tend to stay with the company as years under a manager increases. Employees with 0-2 years with a manager have more attrition than other employees


---



---


"""

df4=df_dept.groupby(['WorkLifeBalance','YearsWithCurrManager','Attrition']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
worklife_yrswithmanager=df4.loc[df4['Attrition']=='Yes',['WorkLifeBalance','No of Employees','YearsWithCurrManager']]
ax=px.line(worklife_yrswithmanager,x='YearsWithCurrManager',y="No of Employees",color='WorkLifeBalance')
ax.update_xaxes(showgrid=False)
ax.update_yaxes(showgrid=False)

"""Work Life Balance as stated by employees, decreases with working under a manager for long time.

**Impact of Job Satisfaction on Attrition**

First, we will compare job satisfaction of Employees with Attrition tendancy to employees with no attrition
"""

sns.lineplot(df_dept,x='JobSatisfaction',y='WorkLifeBalance',hue='Attrition',ci=None)
sns.despine(bottom=True,left=True)

"""

---


---





This shows that employees prone to attrition have less Work life balance and Job satusfaction than those who choose to stay at the company.


---


---



"""

df4=df_dept.groupby(['JobSatisfaction','WorkLifeBalance','Attrition']).apply(lambda x:x['Emp Code'].count()).reset_index(name='No of Employees')
job_att=df4.loc[df4['Attrition']=='Yes',['WorkLifeBalance','No of Employees','JobSatisfaction']]
ax=px.histogram(job_att,x='JobSatisfaction',y="No of Employees",color='WorkLifeBalance')
ax.update_layout(bargap=0.2)
ax.update_xaxes(showgrid=False)
ax.update_yaxes(showgrid=False)
ax.update_layout(yaxis_title="No of Employees")

"""---



---
Work Life Balance and Job Satisfactin show that employees with higher job satisfaction will have greater worklife balance and less tendancy to leave the company

(3-3) is the most common score of JobSatisfaction and WorkLifeBalance

---



---

**Impact of business travel on tendancy to leave in different departments**
"""

df_dept.groupby('EducationField').mean()

sns.set(rc={'figure.figsize':(8,5)})
sns.set_style("white")
ax=sns.countplot(df_dept.loc[df_dept['Attrition']=='Yes',['BusinessTravel','Department']],x='BusinessTravel',hue='Department',color='blue')
for labels in ax.containers:
  ax.bar_label(labels)
sns.despine(bottom=True,left=True)
ax.set(ylabel='No of Employees')

sns.set(rc={'figure.figsize':(8,5)})
sns.set_style("white")
ax=sns.countplot(df_dept,x='BusinessTravel',hue='Department',color='blue')
for labels in ax.containers:
  ax.bar_label(labels)
sns.despine(bottom=True,left=True)
ax.set(ylabel='No of Employees')

"""---

---
This plot shows that out of 237 attriton prone employees a huge number of 156 travel rarely out of which Sales department and R&D travel least for company related works.

Sales department,more travel incentives must be given to employees for better job satisfaction


---



---

**How does travel impact jobsatisfaction?**
"""

#plt.legend(bbox_to_anchor=(1.5,2),loc='upper left',borderaxespad=0)
sns.set(rc={'figure.figsize':(10,5)})
sns.set_style("white")
sns.despine(bottom=True,left=True)
ax=sns.lineplot(df_dept,x='BusinessTravel',y='JobSatisfaction',hue='Department',ci=None)

"""---



---


The plot shows that HR department employees have less Job Satisfaction when they travel rarely for company related works.


---



---

# **Now that we have identified the impact of various factors on Attrition, We will now move on to proposing solutions by considering more metrics of Performances**

Department wise performance of employees
"""

hr_3=0
hr_4=0
s_3=0
s_4=0
rd_3=0
rd_4=0
for i in range(len(df_dept)):
  if(df_dept['Department'].iloc[i]=='Human Resources'):
    if(df_dept['PerformanceRating'].iloc[i]==3):
      hr_3+=1
    else:
      hr_4+=1
  elif (df_dept['Department'].iloc[i]=='Sales'):
       if(df_dept['PerformanceRating'].iloc[i]==3):
         s_3+=1
       else:
         s_4+=1
  else:
       if(df_dept['PerformanceRating'].iloc[i]==3):
         rd_3+=1
       else:
         rd_4+=1

df=pd.DataFrame(  list(zip([rd_3/(rd_3+rd_4)],[rd_4/(rd_3+rd_4)],[s_3/(s_3+s_4)],[s_4/(s_3+s_4)],[hr_3/(hr_3+hr_4)],[hr_4/(hr_3+hr_4)])),
                index=['R&D_3',"R&D_4",'Sales_3','Sales_4','HR_3','HR_4']
)

df.values

ax=sns.barplot(df,x=df.index,y=df.values[0]*100,color='lightblue')
for label in ax.containers:
  ax.bar_label(label)
sns.despine(bottom=True,left=True)
ax.set(ylabel="% of employees in Departments")
ax.set(xlabel=" Performance Ratings of departments")

"""---



---

This shows that Sales department has least % of employees with a good Performance Ratings while R&D has 16% employees with a performance rating of 4.

---



---

**How does number of company worked before impact the performace of employee and attrition?**
"""

ax=sns.countplot(df_dept,x='NumCompaniesWorked',hue='Attrition')
sns.despine(bottom=True,left=True)
ax.set(ylabel="No of Employees")

"""

---



---
This plot shows that of all employees, those who have previosly worked only in 1 company before are more likely to leave th company than those with more work experience.

Suggesting hiring ways of setting experience bar will help company to improve retention rate and performance



---



---


"""

sns.lineplot(df_dept,x='NumCompaniesWorked',y='PerformanceRating',hue='Attrition',ci=None)

"""Realtion between Attrition, Total working years and Percent Salary Hike"""

sns.lineplot(df_dept,x='TotalWorkingYears',y="PercentSalaryHike",hue="Attrition",ci=None)
sns.despine(bottom=True,left=True)

"""---



---

Removing the outlier peak between 10-15yrs of working, other line plot suggests that Employees that leave the company inspite of their working experience have lesser percent salary hike compared to those who stay at the company.

---



---

# **DIFFERENT FACTORS IMPACT ON PERFORMACE**
"""

ax=px.histogram(df_dept,x="Department",color="PerformanceRating",y="TrainingTimesLastYear")
ax.update_layout(yaxis_title="Sum of Training Last Yr for each Department")

"""

---



---

The above plot shows that despite intensive trainings of employees of different departments, the performace rating of 3 (low rate) is more than 4(good) that indicates an inefficient training method or evaluation metrics.



---



---

"""

sns.lineplot(df_dept,x="TrainingTimesLastYear",hue="Department",y="PerformanceRating",ci=None)
sns.despine(bottom=True,left=True)

"""EMPLOYEES MANAGEMENT MEET"""



"""---



---


HR-- Employees have low performance as training increases from 3 times to 6,too much training of HR employees reduces their performance rating
Sales--
R&D--The plot suggests that training of R&D department hasn't been beneficial to improve the performance of employees, the methods of training must be revised.



---



---

From the above insights, we conclude that Attrition is highly effected by:


*   Department of the Employee-- 20% Sales employee tend to leave while 19% from HR and least from R&D i.e. 13.8%, now focussing on why sales department has most Attrition?

*   Attrition where it is Employee/Company initiated is regretted by employees that might have been loyal to the company, thus preventive methods of identifying such attrition initiations to increases retention of quality employees
*   As distance of home from office increases, the percent of employees wanting to leave the company increases, both lineplot coming closer indicates the distance from home causes employees to consider attrition (employee/employer initiatied)


*   Job Satisfaction of Employees decrease with office's distance from home
*   Age Factor-- For the age group of 28-33, employees are most prone to leave the company than others due to lower Job Satisfaction and low working years at the company

*   Salary-- Employees with lower salary tend to leave the company,monetary benefits can help in retaining employees.
*   Years spent under a Manager-Among the Attrition prone employees,those who spend less number of years with a particular manager tend to leave the company earlier, this may be due to lack of sense of attachement to their work and Boss (feeling of burden)


*   Number of companies previously worked in -- all employees, those who have previosly worked only in 1 company before are more likely to leave th company than those with more work experience. Suggesting hiring ways of setting experience bar will help company to improve retention rate and performance

*   Work-Life balance & Job satisfaction-- Employees with less WLB & JS tend to leave the company early.Work Life Balance and Job Satisfactin show that employees with higher job satisfaction will have greater worklife balance and less tendancy to leave the company
*   Travel-- Out of 237 attriton prone employees a huge number of 156 travel rarely out of which Sales department and R&D travel least for company related works. Sales department,more travel incentives must be given to employees for better job satisfaction. HR department employees have less Job Satisfaction when they travel rarely for company related works.

*    Sales department has least percent 13% of employees with a good performace while 16% employees of HR have good performace(4)


*   Percent Salary Hike-- Employees with ggod working experience must be compensated with decent salary hike and Compa Ratio to improve retention
                     
                           PERFORMACE

The performace and efficiency of employees is impacted by:

*   Training hours in each department:

   HR-- Employees have low performance as training increases from 3 times to 6,too much training of HR employees reduces their performance rating
   
   R&D--The plot suggests that training of R&D department hasn't been beneficial to improve the performance of employees, the methods of training must be revised.
*   List item

# **Creating a Logistic regression Algorithm to identify and Flag employees that might leave**
"""

import numpy as np

df_dept['Attrition']=df_dept['Attrition'].astype("string")

df_dept

df_dept['Attrition'].iloc[1]

df_dept['Attrition_No']=0
for i in range(len(df_dept)):
  if(df_dept['Attrition'].iloc[i]=='Yes'):
      df_dept['Attrition_No'].iloc[i]=1
  elif (df_dept['Attrition'].iloc[i]=='No'):
      df_dept['Attrition_No'].iloc[i]=0

"""DETECTING OUTLIERS

Checking types of distribution of some columns
"""

df_dept.info()

"""One hot encoding of some columns"""

df_dept

df_dept['Gender'][0]

df_dept['Gender'].replace(['Female','Male'],[0,1],inplace=True)

df_dept.info()

df_dept['Department'].replace(['Human Resources','Research & Development','Sales'],[1,2,3],inplace=True)

df_dept['BusinessTravel'].replace(['Travel_Rarely','Travel_Frequently','Non-Travel'],[1,2,3],inplace=True)

df_dept['EducationField'].unique()

df_dept['EducationField'].replace(['Medical','Human Resources','Life Sciences','Technical Degree','Other','Marketing'],[1,2,3,4,5,6],inplace=True)

a=df_dept['JobRole'].unique().tolist()

df_dept['JobRole']

df_dept['JobRole'].replace(a,[1,2,3,4,5,6,7,8,9],inplace=True)

df_dept['MaritalStatus'].replace(df_dept['MaritalStatus'].unique().tolist(),[1,2,3,],inplace=True)

df_dept.drop('DoJ',axis=1,inplace=True)

df_dept.drop(['First Name','Last Name'],axis=1,inplace=True)

df_dept.drop('AgeCat',axis=1,inplace=True)

df_dept.drop('Attrition Reason',axis=1,inplace=True)

df_dept.drop('Attrition',axis=1,inplace=True)

df_dept['Regrettable'].replace(['Yes','No'],[1,0],inplace=True)

df_dept.info()

"""Now that we have converted into numeric columns, start normalisation of data

Normalisation of Data
"""

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
data=scaler.fit_transform(df_dept)

df_dept

"""# **FEATURE ENGINEERING**/ FEATURE CORRELATION ANALYSIS

Finding correlation
"""

corr_var=df_dept.corr()
corr_var

"""We drop the features that negatively are correlated with Attrition and others with low correlation to increase accuracy"""

sns.set(rc={'figure.figsize':(30,10)})
sns.heatmap(corr_var,annot=True)

x=df_dept.iloc[:,:-1].values
y=df_dept['Attrition_No'].values #takes attrition number value 0 or 1

df_dept.iloc[:,:-1].values

df_dept['Attrition_No'].values

y

x[0]

import sklearn
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

np.shape(x_train)

y_test

"""#using standard scalar to standardize columns like CTC, distance from home,etc"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(x_train)
X_test=sc.fit_transform(x_test)

x_train[np.isnan(x_train)]=0
x_test[np.isnan(x_test)]=0

X_train[np.isnan(X_train)]=0
X_test[np.isnan(X_test)]=0

X_train

y_train[100]

"""  Logistic Regression Model"""

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()
lr.fit(x_train,y_train)

attrition_prediction=lr.predict(x_test)

attrition_prediction

"""Checking accuracy of Logistic Regression Model"""

from sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score
cm_lr=confusion_matrix(y_test,attrition_prediction)

cm_lr

accuracy_lr=accuracy_score(y_test,attrition_prediction)

print("The accuracy of LR model is ",accuracy_lr*100,"%")

import sklearn.metrics as metrics
print(metrics.classification_report(y_test,attrition_prediction))

"""Implementing Random Forest"""

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier()
rfc.fit(x_train,y_train)

attrition_prediction_rfc=rfc.predict(x_test)

attrition_prediction_rfc

"""Checking accuracy and Confusion Matrix"""

from sklearn.metrics import confusion_matrix
cm_rfc=confusion_matrix(y_test,attrition_prediction_rfc)

cm_rfc

print(metrics.classification_report(y_test,attrition_prediction_rfc))

accuracy_rfc=accuracy_score(y_test,attrition_prediction_rfc)
print("The accuracy of Random Forest Classifier model is ",accuracy_rfc*100,"%")

"""Correlation among features

# **Using SMOTHE for balancing dataset and then predicting !**
"""

!pip install imbalanced-learn

from imblearn.over_sampling import SMOTE
smt=SMOTE(random_state=2)
x_train_smote,y_train_smote=smt.fit_resample(x_train,y_train.ravel())

sum(y_train==1)

sum(y_train==0)

sum(y_train_smote==1)

sum(y_train_smote==0)

"""Now, we have equal amount of data"""

lr=LogisticRegression()
lr.fit(x_train_smote,y_train_smote)

smote_prediction=lr.predict(x_test)

accuracy_smote_lr=accuracy_score(y_test,smote_prediction)

print("The accuracy score using SMOTE data balancing and LR model",accuracy_smote_lr*100,"%")

print(metrics.classification_report(y_test,smote_prediction))

"""f-1 score now also increases for attrition prediction (1) , which was 0 before SMOTE"""

from sklearn.metrics import confusion_matrix
cm_smote_lr=confusion_matrix(y_test,smote_prediction)

cm_smote_lr

"""This confusion matrix shows that 214 were TP, 46 TN, 163 large number of samples FP

# **USING GRADIO FOR UI OF MODEL**
"""

!pip install gradio

!pip install typing_extensions --upgrade

!pip install streamlit

import pickle
pickle.dump(lr,open('lr_model_attrition.pkl','wb'))

import streamlit as st
import pickle

model=pickle.load(open('/content/lr_model_attrition.pkl','rb'))

df_dept.columns

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pickle
# model=pickle.load(open('/content/lr_model_attrition.pkl','rb'))
# st.set_page_config(
#   page_title="EMPLOYEE ATTRITION PREDICTION!",
#   page_icon="🧑‍💼"
# 
# )
# st.title("EMPLOYEE ATTRITION PREDICTION!")
# def main():
#   st.markdown("<h1 style='text-align: center; color: White;background-color:#e84343'>Employee Attrition Predictor</h1>", unsafe_allow_html=True)
#   st.markdown("<h3 style='text-align: center; color: Black;'>Drop in The required Inputs and we will do the rest.</h3>", unsafe_allow_html=True)
#   st.sidebar.header("This Predictor calculates the employee Attrition based on the details of employees ")
# 
# Age= st.slider("AGE",0,100)
# BusinessTravel = st.radio("Business Travel frequency: 1-- Travel Rarely , 2-- Travel Frequently ,3-- Non- Travel ",(1,2,3))
# Department=st.radio("Department 1--'Human Resources' 2--'Research & Development'3--'Sales'",(1,2,3))
# DistanceFromHome=st.slider("DistanceFromHome",0.0,50.0)
# EducationField=st.radio(" Education Field 1--'Medical',2--'Human Resources',3--'Life Sciences',4--'Technical Degree',5--'Other',6--'Marketing'",(1,2,3,4,5,6))
# EnvironmentSatisfaction=st.radio("Environment Satisfcation",(1,2,3,4))
# Gender=st.radio("Gender of employee 1--Male 2--Female",(1,0))
# JobRole=st.radio("Job Role",(1,2,3,4,5,6,7,8,9))
# JobSatisfaction=st.radio("Job Satisfaction",(1,2,3,4,5))
# MaritalStatus=st.radio("Marital Status of employee 1--Single 2--Married 3--Divorced",(1,2,3))
# NumCompaniesWorked=st.slider("Number of companies worked before",0,40)
# PercentSalaryHike=st.slider("Percent Salary hike",0,40)
# PerformanceRating=st.radio("PerformanceRating",(3,4))
# RelationshipSatisfaction=st.radio("Relationship Satisfaction",(1,2,3,4,5))
# TotalWorkingYears=st.slider("Total working years",0,40)
# TrainingTimesLastYear=st.slider("Training times last year",0,40)
# WorkLifeBalance=st.radio("Work Life Balance of employee",(1,2,3,4,5))
# YearsInCurrentRole=st.slider("Years in current role",0,40)
# YearsSinceLastPromotion=st.slider("Years since Last promotion",0,40)
# YearsWithCurrManager=st.slider("Years with current manager?",0,40)
# CTC=st.slider("CTC of employee",0,10000000)
# Performance=st.radio("Performance of employee",(2,3,4,5))
# Potential=st.radio("Potential of employee rate",(2,3,4,5))
# COMPA=st.slider("Compa Ratio of employee",80,120)
# Regrettable=st.radio("Attrition Regretable?",(1,0))
# attrition=st.radio("Attrition Yes or No?",(1,0))
# inputs = [[ Age, BusinessTravel, Department, DistanceFromHome,
#        EducationField, EnvironmentSatisfaction, Gender, JobRole,
#        JobSatisfaction, MaritalStatus, NumCompaniesWorked,
#        PercentSalaryHike, PerformanceRating, RelationshipSatisfaction,
#        TotalWorkingYears, TrainingTimesLastYear, WorkLifeBalance,
#        YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager,
#        CTC, Performance, Potential, COMPA, Regrettable,
#        attrition]] #our inputs
# 
# if st.button('Predict'): #making and printing our prediction
#     result = model.predict(inputs)
#     updated_res = result.flatten().astype(float)
#     if (updated_res==[0.]):
#      st.success("The LogisticRegression model predicts that Employee will : LEAVE ")
#     else:
#      st.success("The LogisticRegression model predicts that Employee will : STAY ")
# 
# 
# if __name__ =='__main__':
#   main() #calling the main method

!pip install pyngrok

from pyngrok import ngrok
!ngrok authtoken 2ZJryUwqeA0s90TEO5DYQJKeIBL_3HcvacvsFCwxbWkPWGoBc

!nohup streamlit run app.py &

url=ngrok.connect(8501)
url

!streamlit run --server.port 8051 app.py >/dev/null

